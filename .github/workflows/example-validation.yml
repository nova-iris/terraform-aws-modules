name: Example Validation

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
        description: 'Module name to validate'
      example:
        required: true
        type: string
        description: 'Example type (basic, advanced, complete)'
      path:
        required: true
        type: string
        description: 'Path to the example directory'

jobs:
  validate-example:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 'latest'
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.VTD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VTD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Terraform Init
      working-directory: ${{ inputs.path }}
      run: terraform init -upgrade
      
    - name: Terraform Validate
      working-directory: ${{ inputs.path }}
      run: terraform validate -no-color
      
    - name: Terraform Plan
      working-directory: ${{ inputs.path }}
      run: |
        terraform plan -no-color -out=tfplan
        echo "## üßæ Terraform Plan Summary for ${{ inputs.module }} - ${{ inputs.example }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: plan-${{ inputs.module }}-${{ inputs.example }}
        path: ${{ inputs.path }}/tfplan
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { execSync } = require('child_process');
          
          try {
            const planOutput = execSync('terraform show -no-color tfplan', { 
              cwd: '${{ inputs.path }}',
              encoding: 'utf8',
              maxBuffer: 1024 * 1024 * 10 // 10MB buffer
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üßæ Terraform Plan Summary for ${{ inputs.module }} - ${{ inputs.example }}
              
              **Status:** ‚úÖ Plan validation successful
              **Module:** ${{ inputs.module }}
              **Example:** ${{ inputs.example }}
              
              <details>
              <summary>View Plan Details</summary>
              
              \`\`\`hcl
              ${planOutput}
              \`\`\`
              </details>`
            });
          } catch (error) {
            console.log('Error reading plan file:', error.message);
          }
          
    - name: Summary Check
      run: |
        echo "‚úÖ Example validation completed successfully"
        echo "üìã Module: ${{ inputs.module }}"
        echo "üìÅ Example: ${{ inputs.example }}"
        echo "üîß Path: ${{ inputs.path }}"