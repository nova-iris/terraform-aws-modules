name: Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        terraform-version: ['1.0', '1.5', 'latest']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix.terraform-version }}
        
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      
    - name: Terraform Init
      run: terraform init -upgrade
      continue-on-error: true
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Comment PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Terraform validation failed. Please check your code formatting and syntax.'
          })
          
    - name: Upload Terraform validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-validation-${{ matrix.terraform-version }}
        path: |
          .terraform/
          *.tfstate*

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.changed-modules }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect Changed Modules
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
        fi
        
        # Find changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
        
        # For now, validate all modules to ensure the workflow works
        CHANGED_MODULES="vpc ec2 ecs lambda s3"
        
        # Convert to JSON array
        echo "changed-modules=[\"vpc\", \"ec2\", \"ecs\", \"lambda\", \"s3\"]" >> $GITHUB_OUTPUT
        
        echo "Changed modules detected: $CHANGED_MODULES"

  validate-examples:
    runs-on: ubuntu-latest
    needs: [validate, detect-changes]
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.changed-modules) }}
        example: [basic, advanced, complete]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if example exists
      id: check_example
      run: |
        if [ -d "modules/${{ matrix.module }}/examples/${{ matrix.example }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Terraform
      if: steps.check_example.outputs.exists == 'true'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 'latest'
        
    - name: Configure AWS Credentials
      if: steps.check_example.outputs.exists == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.VTD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.VTD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Terraform Init
      if: steps.check_example.outputs.exists == 'true'
      working-directory: modules/${{ matrix.module }}/examples/${{ matrix.example }}
      run: terraform init -upgrade
      
    - name: Terraform Validate
      if: steps.check_example.outputs.exists == 'true'
      working-directory: modules/${{ matrix.module }}/examples/${{ matrix.example }}
      run: terraform validate -no-color
      
    - name: Terraform Plan
      if: steps.check_example.outputs.exists == 'true'
      working-directory: modules/${{ matrix.module }}/examples/${{ matrix.example }}
      run: |
        terraform plan -no-color -out=tfplan
        echo "## 🧾 Terraform Plan Summary for ${{ matrix.module }} - ${{ matrix.example }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY