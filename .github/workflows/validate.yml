name: Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        terraform-version: ['1.0', '1.5', 'latest']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ matrix.terraform-version }}
        
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      
    - name: Terraform Init
      run: terraform init -upgrade
      continue-on-error: true
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Comment PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ Terraform validation failed. Please check your code formatting and syntax.'
          })
          
    - name: Upload Terraform validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-validation-${{ matrix.terraform-version }}
        path: |
          .terraform/
          *.tfstate*

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.changed-modules }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect Changed Modules
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.sha }}"
        fi
        
        # Find changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA)
        
        # Extract changed modules
        CHANGED_MODULES=""
        for file in $CHANGED_FILES; do
          if [[ $file == modules/* ]]; then
            MODULE=$(echo $file | cut -d'/' -f2)
            if [[ ! " $CHANGED_MODULES " =~ " $MODULE " ]]; then
              CHANGED_MODULES="$CHANGED_MODULES $MODULE"
            fi
          fi
        done
        
        # If no modules changed, validate all modules
        if [ -z "$CHANGED_MODULES" ]; then
          CHANGED_MODULES="vpc ec2 ecs lambda s3"
        fi
        
        # Convert to JSON array
        JSON_ARRAY="[\"$(echo $CHANGED_MODULES | sed 's/ /", "/g')\"]"
        echo "changed-modules=$JSON_ARRAY" >> $GITHUB_OUTPUT
        
        echo "Changed modules detected: $CHANGED_MODULES"

  validate-examples:
    runs-on: ubuntu-latest
    needs: [validate, detect-changes]
    
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.changed-modules) }}
        example: [basic, advanced, complete]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if example exists
      id: check_example
      run: |
        if [ -d "modules/${{ matrix.module }}/examples/${{ matrix.example }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate Example
      if: steps.check_example.outputs.exists == 'true'
      uses: ./.github/workflows/example-validation.yml
      with:
        module: ${{ matrix.module }}
        example: ${{ matrix.example }}
        path: modules/${{ matrix.module }}/examples/${{ matrix.example }}
      secrets: inherit